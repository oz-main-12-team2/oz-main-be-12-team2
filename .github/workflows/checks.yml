# .github/workflows/checks.yml

name: Code Quality Checks

# 트리거 이벤트 부분
# 코드가 푸시되거나 풀 리퀘스트가 생성될 때 CI가 실행됩니다.
on:
  push:
    branches:
      - develop
      - main
  pull_request:

jobs:
  ci:
    # 가장 최신버전의 ubuntu를 OS 환경으로 설정합니다.
    runs-on: ubuntu-24.04

    # services 키워드를 사용하여 PostgreSQL 서비스를 설정
    services:
      db:
        image: postgres:15
        ports:
          - 5432:5432
        # Github Secrets에서 가져와서 env로 등록, PostgreSQL 데이터베이스 연결 설정
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        # 옵션으로 PostgreSQL의 연결 상태를 확인. 10초 단위로 5번 재시도. 5초간 기다림.
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # CI 환경에서 코드를 체크아웃합니다.
      - name: Checkout code
        uses: actions/checkout@v3

      # CI 환경에서 사용할 파이썬 버전을 지정합니다.
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # uv를 설치합니다.
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      # uv를 사용하여 의존성 패키지들을 설치합니다.
      - name: Install dependencies using uv
        run: |
          uv sync --dev

      #      - name: Create .env file for docker-compose
      #        run: |
      #          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
      #          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
      #          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
      #          echo "DB_PORT=5432" >> .env

      # ruff로 import 정렬 및 코드 스타일 검사
      - name: Run ruff (Code quality check)
        run: |
          uv run ruff check .

      # db 연결을 테스트
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U "${{ secrets.POSTGRES_USER }}"; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      # .env 환경 구성
      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB" >> $GITHUB_ENV
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

      # 정상적인 db 연결을 확인했으니 마이그레이션 수행
      - name: Run aerich migrations
        run: |
          uv run aerich init -t core.config.TORTOISE_ORM || true
          uv run aerich init-db || true
          uv run aerich migrate || true
          uv run aerich upgrade || true

      # FastAPI에서 pytest로 테스트를 실행합니다.
      - name: Run tests with pytest
        env:
          SECRET_KEY: 'test-secret-key-for-ci-only'
          DJANGO_SETTINGS_MODULE: 'config.settings'
        run: |
          uv run pytest
